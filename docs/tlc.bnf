
program := { vardef | funcdef }


vardef := "var" ident [ ":" type ] [ "=" <expr> ] ";"


funcdef := "func" ident "(" [ paramdef { "," paramdef } ] ")" [ type ]  ( ";" | block )

paramdef := ident ":" type


recorddef := "record" [ "(" qualident ")" ] "{" { fielddef } "}"

fielddef := ident ":" type ","


type := ident [ arraydef | "&"]

arraydef := "[" [ integer { "," integer } ] "]"


operand := literal | identifier | "(" expression ")"
literal := integer | string | "true" | "false" | "nil"

primary-expr := operand | conversion | primary-expr selector | primary-expr index | primary-expr arguments
selector := "." identifier
index := "[" expr "]"
arguments := "(" [ expr { "," expr } ] ")"

factor := integer | string | special | designator [ params ] | "(" expr ")" | "~" factor
term := factor { mulop factor }
simpleexpr := [ "+" | "-" ] term { addop term }
expr := simpleexpr [ relop simpleexpr ]

unary-expr := primary-expr | unary-op unary-expr
mul-expr := unary-expr { mul-op unary-expr }
add-expr := mul-expr { add-op mul-expr }
rel-expr := add-expr [ rel-op add-expr ]
and-expr := rel-expr { "&&" rel-expr }
expr := and-expr { "||" and-expr }

unary-op := "+" | "-" | "!" | "~" | "&"
mul-op := "*" | "/" | "%" | "<<" | ">>" | "&" | "&~"
add-op := "+" | "-" | "|" | "^"
rel-op := "==" | "!=" | "<" | "<=" | ">" | ">="

integer := digit {digit} | "0" "x" {hexdigit} | "0" "b" {bindigit}

hexdigit := "A" .. "F" | "a" .. "f" | "0" .. "9"

bindigit := "0" | "1"

digit := "0" .. "9"


designator := qualident { selector }

selector := "." ident | "[" explist "]" | "->"

explist := expr { "," expr }

params := "(" explist ")"


qualident := [ indent "." ] ident

ident := ( letter | "_" ) | { letter | digit | "_" } 

letter := "A" .. "Z" | "a" .. "z" 

statement := assignment | if | while | for | break | return | incdec | expr ";" | ";"

assignment := designator assign-op expr ";"

incdec := expr ( "++" | "--" ) ";"

assign-op := "=" | ( add-op | mul-op ) "="

if := "if" expr block { "else" "if" expr block } [ "else" block ]

while := "while" expr block

for := "for" [ expr ] ";" [ expr ] ";" [ expr ] block

break := "break" ";"

return := "return" expr ";"

block := "{" { statement } "}"


